name: Build

on:
  workflow_call:
    inputs:
      runs-on:
        type: string
        required: true
      system:
        type: string
        required: true
      channel:
        type: string
        required: true

env:
  CACHIX_NAME: federicoschonborn

jobs:
  build:
    name: Build
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        if: inputs.runs-on == 'ubuntu-latest' && !contains(fromJSON('["x86_64-linux", "i686-linux"]'), inputs.system)

      - name: Install Nix
        uses: cachix/install-nix-action@v23
        with:
          nix_path: nixpkgs=channel:${{ inputs.channel }}
          extra_nix_config: |
            access-tokens = github.com=${{ github.token }}
            system = ${{ inputs.system }}

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: ${{ env.CACHIX_NAME }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        # GitHub Actions was a mistake.
        if: contains(fromJSON('["x86_64-linux", "i686-linux", "aarch64-linux", "x86_64-darwin", "aarch64-darwin"]'), inputs.system)

      - name: Show Nixpkgs version
        run: nix-instantiate --eval -E "(import <nixpkgs> {}).lib.version"

      - name: Check evaluation
        run: |
          nix-env -f . -qa \* --meta --xml \
            --allowed-uris https://static.rust-lang.org \
            --option restrict-eval true \
            --option allow-import-from-derivation true \
            --drv-path --show-trace \
            -I "nixpkgs=$(nix-instantiate --find-file nixpkgs)" \
            -I "$PWD"

      - name: Build Nix packages
        run: nix shell -f "<nixpkgs>" nix-build-uncached -c nix-build-uncached ci.nix -A cacheOutputs -build-flags "-L"
