#!/usr/bin/env fennel

(local http-request (require :http.request))
(local cjson (require :cjson))
(local view (require :fennel.view))

(local lpeg (require :lpeg))
(lpeg.locale lpeg)

;;; ------------------------------------------------------------------------------------------------
;;; General utilities

(fn basename [path]
  "Get base name of a path."
  (string.gsub path "(.*/)(.*)" "%2"))

(fn program-name []
  "Get this program name."
  (basename (. arg 0)))

(fn io.slurp [file]
  "Read all contents of a file."
  (with-open [buf (assert (io.open file))]
    (buf:read :*all)))

(fn string.chomp [str pattern]
  "Remove trailing pattern, defaulting to newlines: \\n, \\r, or \\r\\n."
  (let [pattern ( .. (or pattern "[\r\n]+") "$")]
    (string.gsub str pattern "")))

(fn string.split [str sep]
  "Split string by the separator into a table."
  (let [regex (match sep
                "" "."
                x (.. "[^" x "]+")
                _ "%S+")]
    (icollect [chunk (str:gmatch regex)]
      chunk)))

(fn table.unique [tbl]
  "Remove duplicated items in the sequencial table."
  (let [items (collect [_ item (ipairs tbl)]
                item true)]
    (icollect [item _ (pairs items)]
      item)))

;;; ------------------------------------------------------------------------------------------------
;;; HTTP functions

(local http {})

(fn http.get [uri headers]
  "Get contents of uri. The second value is its headers."
  (let [request (http-request.new_from_uri uri)]
    (each [key value (pairs (or headers {}))]
      (request.headers:append key value))
    (let [(headers stream) (assert (: request :go))
          body (assert (stream:get_body_as_string))]
     (if (= (headers:get ":status") :200)
         (values body headers)
         (error (view {: body : headers})))))) 

;;; ------------------------------------------------------------------------------------------------
;;; Nix helpers

(local nix {})

(fn nix.prefetch-url [url]
  "Prefetch url and get its sha256 hash."
  (let [cmd (string.format "nix-prefetch-url --type sha256 %s 2>/dev/null" url)
        pipe (assert (io.popen cmd))
        sha256 (string.chomp (assert (pipe:read :*all)))]
    (pipe:close)
    sha256))

;;; ------------------------------------------------------------------------------------------------
;;; Nixpkgs helpers

(local nixpkgs {})

(fn nixpkgs.license-from-github-license [github-license]
  "Translate GitHub API license to Nixpkgs license attr name in lib.licenses."
  (let [map {:agpl-3.0 "agpl3Only"
             :apache-2.0 "asl20"
             :bsd-2-clause "bsd2"
             :bsd-3-clause "bsd3"
             :bsl-1.0 "boost"
             :cc0-1.0 "cc0"
             :epl-2.0 "epl20"
             :gpl-2.0 "gpl2Only"
             :gpl-3.0 "gpl3Only"
             :lgpl-2.1 "lgpl21Only"
             :mit "mit"
             :mpl-2.0 "mpl20"
             :unlicense "unlicense"
             :wtfpl "wtfpl"}]
    (. map github-license.key)))

(fn nixpkgs.get-vim-plugins-manifest [channel]
  "Fetch manifest of the official nixpkgs vim plugins."
  (let [channel (or channel "nixpkgs-unstable")
        path (string.format "/NixOS/nixpkgs/%s/pkgs/applications/editors/vim/plugins/vim-plugin-names" channel)
        url (string.format "https://raw.githubusercontent.com%s" path)
        specs (: (http.get url) :split)]
    ;; Return it as a map from spec to bool for later convenience.
    (collect [_ spec (ipairs specs)]
      spec true)))

;;; ------------------------------------------------------------------------------------------------
;;; GitHub things

(local github {:token-missing-warned false})

(fn github.get [query token]
  "Get contents by query using GitHub REST API."
  (let [token (or token
                  (os.getenv "GITHUB_TOKEN")
                  (when (not github.token-missing-warned)
                    (io.stderr:write "GITHUB_TOKEN missing...")
                    (set github.token-missing-warned true)
                    nil))
        (body headers) (http.get (string.format "https://api.github.com/%s" query)
                                 (let [request-headers {:content-type "application/json"}]
                                   (when token
                                     (set request-headers.authorization
                                          (string.format "token %s" token)))
                                   request-headers))]
    (values (cjson.decode body) headers)))

(fn github.null? [x]
  "Check if content is null."
  (or (not x)
      (= x "")
      (= (type x) :userdata))) ; #<userdata NULL>


(set github.repo {:type "github"})

(set github.repo.__index github.repo)

(fn github.repo.new [full-name-or-owner name]
  "Create object representing GitHub repo."
  (let [info (let [full-name (if (not name)
                                 full-name-or-owner
                                 (string.format "%s/%s" full-name-or-owner name))]
               (github.get (string.format "repos/%s" full-name)))
        obj {:full-name info.full_name
             :owner (pick-values 1 (string.match info.full_name "^([^/]+)/([^/]+)$"))
             :name info.name
             :default-branch info.default_branch
             :description (if (not (github.null? info.description))
                              info.description
                              "No description")
             :fork? info.fork
             ;; Better to show github page since homepage value may contain its owner's.
             :homepage (string.format "https://github.com/%s" info.full_name)
             :license (and (not (github.null? info.license))
                           {:key info.license.key
                            :name info.license.name})}]
    (setmetatable obj github.repo)))

(fn github.repo.get-recent-commit [self branch]
  "Get recent commit of the branch."
  (let [branch (or branch self.default-branch)
        response (github.get (string.format "repos/%s/commits/%s" self.full-name branch))]
    {: branch
     :date response.commit.committer.date
     :sha response.sha}))

(fn github.repo.get-url [self sha]
  "Get download url of the given hash."
  (string.format "https://github.com/%s/archive/%s.tar.gz"
                 self.full-name
                 sha))

;;; ------------------------------------------------------------------------------------------------
;;; GitLab things

(local gitlab {})

(fn gitlab.get [query]
  "Get contents by query using GitLab REST API."
  (let [(body headers) (http.get (string.format "https://gitlab.com/api/v4/%s" query)
                                 {:content-type "application/json"})]
    (values (cjson.decode body) headers)))

(fn gitlab.escape-path-with-namespace [path-with-namespace]
  "Replace / with %2F in the path with namespace."
  (string.gsub path-with-namespace "/" "%%2F"))
 

(set gitlab.project {:type "gitlab"})

(set gitlab.project.__index gitlab.project)

(fn gitlab.project.new [path-with-namespace-or-namespace path]
  "Create object representing GitLab project."
  (let [info (let [path-with-namespace
                   (if (not path)
                       path-with-namespace-or-namespace
                       (string.format "%s/%s" path-with-namespace-or-namespace path))
                   escaped-path-with-namespace
                   (gitlab.escape-path-with-namespace path-with-namespace)]
               (gitlab.get (string.format "projects/%s" escaped-path-with-namespace)))
        obj {:full-name info.path_with_namespace
             :owner info.namespace.path
             :name info.path
             :default-branch info.default_branch
             :description info.description
             :fork? nil
             :homepage info.web_url
             :license nil}]
    (setmetatable obj gitlab.project)))

(fn gitlab.project.get-recent-commit [self branch]
  "Get recent commit of the branch."
  (let [branch (or branch self.default-branch)
        response (gitlab.get (string.format "projects/%s/repository/branches/%s"
                                            (gitlab.escape-path-with-namespace self.full-name)
                                            branch))]
    {: branch
     :date response.commit.committed_date
     :sha response.commit.id}))

(fn gitlab.project.get-url [self sha]
  "Get download url of the given hash."
  (string.format "https://gitlab.com/api/v4/projects/%s/repository/archive.tar.gz?sha=%s"
                 (gitlab.escape-path-with-namespace self.full-name)
                 sha))

;;; ------------------------------------------------------------------------------------------------
;;; awesome-neovim

(local awesome-neovim {})

(fn awesome-neovim.get-vim-plugins-manifest []
  "Fetch vim plugins manifest from rockerBOO/awesome-neovim."
  (let [path "/rockerBOO/awesome-neovim/main/README.md"
        url (string.format "https://raw.githubusercontent.com%s" path)
        readme (http.get url)
        out []]
    (var state :init)
    (each [_ line (ipairs (readme:split "\n"))]
      (match state
        :init   (when (line:match "^## Plugin")
                  (set state :active))
        :active (if (line:match "^%s*-%s+%[")
                    ;; trim mini.nvim#foobar
                    (table.insert out (line:match "%[[^%]]+%]%(https://([^%)#]+)"))
                    (line:match "^### Preconfigured Configuration")
                    (set state :skip)
                    (line:match "^## External")
                    (set state :done))
        :skip   (when (line:match "^### Keybinding")
                  (set state :active))))
    (icollect [_ line (ipairs out)]
      (let [(repo-type full-name) (line:match "^([^/]+)%.com/([^/]+/[^/]+)$")]
        (match repo-type
          :gitlab (string.format "%s:%s" repo-type full-name)
          :github (if (full-name:match "feline%.nvim")
                      "feline-nvim/feline.nvim" ; hot fix due to organization change
                      full-name)
          ;; Ignore plugins hosted by other than github/gitlab, e.g., sourcehut.
          _ nil)))))

;;; ------------------------------------------------------------------------------------------------
;;; Manifest spec parser

(local manifest {})

(set manifest.__index manifest)

(set manifest.spec {})

(fn manifest.spec.decode [line]
  "Parse a line as manifest spec and return a table containing spec properties."
  (let [space (^ lpeg.space 0)
        repo-identifier (^ (+ lpeg.alnum (lpeg.S "_.-")) 1)
        ;; This is not exactly correct; see https://git-scm.com/docs/git-check-ref-format
        gitref-identifier (^ (+ lpeg.alnum (lpeg.S "@/_.-{}")) 1)
        attr-identifier (* (+ lpeg.alpha (lpeg.S "_"))
                           (^ (+ lpeg.alnum (lpeg.S "_-")) 0))
        repo-type (lpeg.Cg (+ (lpeg.P :github)
                              (lpeg.P :gitlab))
                           :type)
        owner (lpeg.Cg repo-identifier
                       :owner)
        name (lpeg.Cg repo-identifier
                      :name)
        full-name (* owner space (lpeg.S "/") space name)
        gitref (lpeg.Cg ( + gitref-identifier (lpeg.P ""))
                        :gitref)
        rename (lpeg.Cg attr-identifier
                        :rename)
        parser (lpeg.Ct (* space
                           (^ (* repo-type space (lpeg.S ":")) -1)
                           space
                           full-name
                           space
                           (^ (*  (lpeg.S ":") space gitref) -1)
                           space
                           (^ (* (lpeg.S ":") space rename) -1)
                           space
                           (lpeg.P -1)))]
    (match (parser:match line)
      result {:type (or result.type :github)
              :full-name (.. result.owner "/" result.name)
              :branch (when (and result.gitref (not= result.gitref ""))
                        result.gitref)
              :rename result.rename}
      _ (error (string.format "invalid manifest spec: %s" line)))))

(fn manifest.spec.encode [spec]
  "Encode a table of spec properties to a line of manifest spec."
  (.. (if (and spec.type (not= spec.type :github))
          (string.format "%s:" spec.type)
          "")
      spec.full-name
      (if (and spec.branch spec.rename)
          (string.format ":%s:%s" spec.branch spec.rename)
          (and spec.branch (not spec.rename))
          (string.format ":%s" spec.branch)
          (and (not spec.branch) spec.rename)
          (string.format "::%s" spec.rename)
          "")))

(fn manifest.spec.format [line]
  "Format a line of manifest spec."
  (-> line
      (manifest.spec.decode)
      (manifest.spec.encode)))

(fn manifest.lint [self]
  "Sort specs, remove duplicated specs, format specs, etc."
  (let [specs (table.unique (icollect [_ line (ipairs self.specs)]
                              (manifest.spec.format line)))]
    (table.sort specs
                (fn [left right]
                  (< (string.gsub left "^[^/]+:" "")
                     (string.gsub right "^[^/]+:" ""))))
    (set self.specs specs)))

(fn manifest.changed? [self]
  "Return true of manifest specs are changed since its loaded time."
  (not= self.origin
        (table.concat self.specs "\n")))

(fn manifest.load [file]
  "Load manifest from a file, defaulting to `manifest.txt`."
  (let [file (or file "manifest.txt")
        specs (icollect [spec (io.lines file)] spec)
        obj {: file
             : specs
             :origin (table.concat specs "\n")}]
    (setmetatable obj manifest)))

(fn manifest.save [self]
  "Save manifest to the file."
  (when (self:changed?)
    (with-open [buf (io.open self.file :w)]
      (buf:write (.. (table.concat self.specs "\n") "\n")))
    (io.stderr:write (string.format "%s: manifest saved to %s\n" (program-name) self.file))))

;;; ------------------------------------------------------------------------------------------------
;;; Cache file

(local cache {})

(set cache.__index cache)

(fn cache.load []
  "Load cache of previous update."
  (let [file ".previous-update.json"
        (ok data) (pcall io.slurp file)
        data (if ok
                 (cjson.decode data)
                 {})
        obj {: file : data :changed? false}]
    (setmetatable obj cache)))

(fn cache.save [self]
  "Save cache as JSON."
  (when self.changed?
    (with-open [buf (io.open self.file :w)]
      (buf:write (cjson.encode self.data)))
    (io.stderr:write (string.format "%s: cache saved to %s\n" (program-name) self.file))))

;;; ------------------------------------------------------------------------------------------------
;;; Vim plugin

(local plugin {})

(set plugin.__index plugin)

(fn plugin.escape-name [name]
  "Replace '.' or '_' with '-' in plugin name."
  (-> name
      (string.gsub "%." "-")
      (string.gsub "_" "-")))

(fn plugin.get-date [timestamp]
  "Get date (YYYY-MM-DD) from timestamp."
  (string.match timestamp "^%d%d%d%d%-%d%d%-%d%d"))

(fn plugin.preprocess [self]
  "Adjust style of nix attrs."
  (let [desc self.repo.description]
    ;; Remove trailing period(s) from meta.description.
    (set self.repo.description (string.chomp desc "%.+"))
    self))

(fn plugin.new [spec]
  "Create object representing Vim plugin."
  (let [spec (manifest.spec.decode spec)
        repo (match spec.type
               :gitlab (gitlab.project.new spec.full-name)
               :github (github.repo.new spec.full-name)
               _ (error "undefined repo type"))
        recent-commit (repo:get-recent-commit spec.branch)
        url (repo:get-url recent-commit.sha)
        attr-name (plugin.escape-name (or spec.rename repo.name))
        obj {: attr-name 
             :pname attr-name
             :version (plugin.get-date recent-commit.date)
             : repo
             :branch recent-commit.branch
             : url
             :sha256 (nix.prefetch-url url)}
        obj (plugin.preprocess obj)]
     (setmetatable obj plugin)))

(fn plugin.to-nixexpr [self]
  "Generate snippet of Nix expression in an attr set."
  (string.format
    "  %s = buildVimPluginFrom2Nix {
    pname = \"%s\";
    version = \"%s\";
    src = fetchurl {
      url = \"%s\";
      sha256 = \"%s\";
    };
    meta = with lib; {
      description = \"%s\";
      homepage = \"%s\";%s
    };
  };
"
    self.attr-name
    self.pname
    self.version
    self.url
    self.sha256
    ;; Escape special character sequences in double-quotes.  For more information, see
    ;; <https://nixos.org/manual/nix/stable/expressions/language-values.html#simple-values>.
    (-> self.repo.description
        (: :gsub "\\" "\\\\")
        (: :gsub "\"" "\\\"")
        (: :gsub "${" "\\${"))
    self.repo.homepage
    (let [license (and self.repo.license
                       (nixpkgs.license-from-github-license self.repo.license))]
      (if license
          (string.format "\n      license = with licenses; [ %s ];" license)
          ""))))

(fn format-plugin [fmt plugin]
  "Generate snippet of the given format."
  (string.format
    fmt
    (match plugin.repo.type
      :github plugin.repo.full-name
      :gitlab (string.format "gitlab:%s" plugin.repo.full-name)
      _ (error "undefined plugin repo type"))
    plugin.repo.homepage
    (if (= plugin.branch plugin.repo.default-branch)
        ""
        (string.format " [branch: `%s`]" plugin.branch))
    plugin.version
    plugin.attr-name))

(fn plugin.to-markdown-bullet [self]
  "Generate snippet of markdown bullet line."
  (format-plugin
    "- [%s](%s)%s (recent commit: %s, package name: `%s`)\n"
    self))

(fn plugin.to-markdown-table-row [self]
  "Generate snippet of markdown table row."
  (format-plugin
    "| [%s](%s)%s | %s | `%s` |\n"
    self))

;;; ------------------------------------------------------------------------------------------------
;;; Subcommands

(fn command-update [...]
  "Update manifested plugins."
  (let [args (collect [_ a (ipairs [...])] a true)
        update-all? (. args "--all")
        %manifest (manifest.load)
        %cache (cache.load)]
    (with-open [nix (io.open "pkgs/vim-plugins.nix" :w)
                readme (io.open "README.md" :w)]
      (nix:write "{ lib, buildVimPluginFrom2Nix, fetchurl }:\n\n{\n")
      (readme:write (io.slurp "assets/README_header.md"))
      (each [_ spec (ipairs %manifest.specs)]
        (if (or update-all?
                (not (. %cache :data spec)))
            (do (io.stderr:write (string.format "%s: update %s..." (program-name) spec))
                (let [pkg (plugin.new spec)
                      nixexpr (pkg:to-nixexpr)
                      mditem (pkg:to-markdown-table-row)]
                  (nix:write nixexpr)
                  (readme:write mditem)
                  (tset %cache.data spec {: nixexpr : mditem}))
                (set %cache.changed? true)
                (io.stderr:write "done\n"))
            (do (io.stderr:write (string.format "%s: skip %s..." (program-name) spec)) 
                (nix:write (. %cache :data spec :nixexpr))
                (readme:write (. %cache :data spec :mditem))
                (io.stderr:write "used previous result\n"))))
      (nix:write "}\n")
      (readme:write (io.slurp "assets/README_footer.md")))
    (%cache:save)
    (%manifest:lint)
    (%manifest:save)))

(fn command-lint [...]
  "Check if any plugin in the manifest is already maintained in the official nixpkgs."
  (let [args (collect [_ a (ipairs [...])] a true)
        force? (. args "--force")
        %manifest (manifest.load)
        specs []
        official-manifest (nixpkgs.get-vim-plugins-manifest)
        whitelist (collect [_ spec (ipairs (. (manifest.load "whitelist.txt")
                                              :specs))]
                    spec true)
        blacklist (collect [_ spec (ipairs (. (manifest.load "blacklist.txt")
                                              :specs))]
                    spec true)]
    (each [_ spec (ipairs %manifest.specs)]
      (if (. blacklist spec)
          (do (io.stderr:write
                (string.format "%s: %s is in the blacklist\n" (program-name) spec))
              (when (not force?)
                (table.insert specs spec)))
          (and (not (. whitelist spec))
               (. official-manifest spec))
          (do (io.stderr:write
                (string.format "%s: %s is provided by official\n" (program-name) spec))
              (when (not force?)
                (table.insert specs spec)))
          (table.insert specs spec)))
    (set %manifest.specs specs)
    (%manifest:lint)
    (%manifest:save)))

(fn command-awesome-neovim []
  "Fetch awesome-neovim vim plugins manifest."
  (let [%manifest (manifest.load)
        %manifest-specs (collect [_ spec (ipairs %manifest.specs)]
                          spec true)
        official-manifest (nixpkgs.get-vim-plugins-manifest)
        awesome-neovim-manifest (awesome-neovim.get-vim-plugins-manifest)
        whitelist (collect [_ spec (ipairs (. (manifest.load "whitelist.txt")
                                              :specs))]
                    spec true)
        blacklist (collect [_ spec (ipairs (. (manifest.load "blacklist.txt")
                                              :specs))]
                    spec true)]
    (io.stderr:write (string.format "%s: search for new plugins from awesome-neovim\n"
                                    (program-name)))
    (each [_ spec (ipairs awesome-neovim-manifest)]
      (when (and (not (. blacklist spec))
                 (not (. %manifest-specs spec))
                 (or (. whitelist spec)
                     (not (. official-manifest spec))))
        (table.insert %manifest.specs spec)
        (io.stderr:write (string.format "%s: add %s\n" (program-name) spec))))
    (%manifest:lint)
    (%manifest:save)))

;;; ------------------------------------------------------------------------------------------------
;;; Main

(fn main []
  (match arg
    [:update & args] (command-update (unpack args))
    [:lint & args] (command-lint (unpack args))
    [:awesome-neovim & _] (command-awesome-neovim)
    args (command-update (unpack args))
    _ (error "undefined subcommand")))

(main)
